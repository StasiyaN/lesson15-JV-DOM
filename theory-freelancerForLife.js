//WINDOW
const windowWidth = window.innerWidth;
console.log(`Window width is: ${windowWidth}px`);

//BOM
// browser information using navigator object
console.log(navigator.userAgent);

if (navigator.userAgent.includes('Chrome')) {
    console.log('Chrome browser');
} else if (navigator.userAgent.includes('Firefox')) {
    console.log('Firefox browser');
}

//get url info using location object
//get url of actual page
console.log(location.href);
//change url
//location.href = "https://youtube.com"

//browser history using history object
// history.back();
// history.forward();

//communication with user

//alert
//alert('hello world!');

//confirm
//const confirmResult = confirm('do you want to enter?')

//prompt
// const promptResult = prompt('what is your name?');
// console.log(promptResult);

//DOM
const htmlElement = document.documentElement;
const headElement = document.head;
const bodyElement = document.body;
console.log(bodyElement);

const firstChild = bodyElement.firstChild;
const lastChild = bodyElement.lastChild;
console.log(firstChild);
console.log(lastChild);
const bodyChildNodes = bodyElement.childNodes;
console.log(bodyChildNodes);

console.log(bodyElement.hasChildNodes());

for (let node of bodyChildNodes) {
    console.log(node);
}

//SIBLINGS +  PARENT properties - NODES

const previousSiblingNode = bodyElement.previousSibling;
console.log(previousSiblingNode);
const nextSiblingNode = bodyElement.nextSibling;
console.log(nextSiblingNode);
const parentNode = bodyElement.parentNode;
console.log(parentNode); // we will get the entire html because we are looking at the body tag

// SIBLINGS - ONLY ELEMENTS
const bodyChildren = bodyElement.children;
console.log(bodyChildren);

const firstElementChild = bodyElement.firstElementChild;
console.log(firstElementChild);
const firstElementParent = firstElementChild.parentElement;
console.log(firstElementParent);

//querySelectorAll

const yellow = document.querySelectorAll('.yellow');
console.log(yellow);

const divElement = document.querySelectorAll('div');
console.log(divElement);

const firstDiv = document.querySelectorAll('div.first');
console.log(firstDiv);

const menuItems = document.querySelectorAll('.menu>li');
console.log(menuItems);

const menu = document.querySelectorAll('.menu, .red');
console.log(menu);

const menuInSecondDiv = document.querySelectorAll('.second .menu');
console.log(menuInSecondDiv); //only ul with menu class stored in div with second class

const elems = document.querySelectorAll('li');
console.log(elems[2]);

for (const item of elems) {
    console.log(item);
}

//to search in collections put in variables
const sublist = document.querySelectorAll('.sublist');
const sublistItems = sublist[0].querySelectorAll('li');
console.log(sublistItems);

//insert elements into DOM
const textElement = document.querySelector('.lesson-text');//existing element we rely on
const newElement = document.createElement('div'); // new element we want to place in DOM
newElement.innerHTML = `JavaScript is fun!`

//before the object
//textElement.before(newElement);

//after the object
//textElement.after(newElement);

//...inside and in the begging of the existing object we're working with
//textElement.prepend(newElement);

//inside and in the end of existing element we're working with
textElement.append(newElement, 'Hello World!');

//insertAdjacentHTML
const existingElement = document.querySelector('.insertHTML');
existingElement.insertAdjacentHTML(
    'afterbegin',
    `<button class="btn"> click me!</button> <br>`
);
//afterbegin
//beforebegin
//beforeend
//afterend

//–ø–µ—Ä–µ–Ω–æ—Å —É–∑–ª–æ–≤
// i alrteady have variable with div lesson-text = textElement
const headerText = document.querySelector('h1');
console.log(headerText);
textElement.prepend(headerText);

//–ø–æ–ª—É—á–∞–µ–º obj
//i already have this - existingElement
//clone without childen elements
const cloneElementEmpty = existingElement.cloneNode();
const cloneElementFull = existingElement.cloneNode(true);
//we need to insert it
//i choose to insert in inside of second div
const secondDiv = document.querySelector('.second');
console.log(secondDiv);
secondDiv.append(cloneElementEmpty);
secondDiv.prepend(cloneElementFull);

//adding class
const btn = document.querySelector('.btn');
btn.classList.add('active');

for (let className of btn.classList) {
    console.log(className);
}

//style
btn.style.color = 'red';
//margin-bottom
btn.style.marginBottom = '30px';
//z-index
btn.style.zIndex = '1';

//–ø–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞ –Ω–æ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –≤ —Ç–æ–º —Å–ª—É—á–∞–µ –µ—Å–ª–∏ –æ–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–æ
//–≤ –∞—Ç—Ä–∏–±—É—Ç–µ style in html

console.log(btn.style.color);

//—Å–±—Ä–æ—Å —Å—Ç–∏–ª—è
btn.style.zIndex = '';

//cssText
btn.style.cssText = `
    font-weight: bold;
    font-size: 30px;
`
//getComputedStyle
const h1Style = getComputedStyle(headerText);
console.log(h1Style.color);

//parseInt
const paddingTop = parseInt(h1Style.marginTop);
console.log(paddingTop);

//attributes properties
console.dir(headerText);
console.dir(btn);
const link = document.querySelector('a');
console.log(link.href);

//custom attributes
//check if element has specific attribute
console.log(headerText.hasAttribute('name'));
//get element's specific attribute
const headersName = headerText.getAttribute('name');
console.log(headersName);

//set attribute name
headerText.setAttribute('title', 'example');
//remove attribute
headerText.removeAttribute('name ');

//custom attributes
headerText.setAttribute('my-attribute', 'ok');

if (headerText.hasAttribute('my-attribute')) {
    console.log(`my attribute is here`)
}

//—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –º–µ–∂–¥—É –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏ –∏ —Å–≤ –≤–∞–º–∏
//–ø–æ–ª—É—á–∞–µ–º —ç–ª
const myInput = document.querySelector('.my-input');

myInput.setAttribute('id', '123');
console.log(myInput.id);

myInput.id = "321";
console.log(myInput.getAttribute('id'));

//‚úÖ –°–Ω–∞—á–∞–ª–∞: —á—Ç–æ —Ç–∞–∫–æ–µ –∞—Ç—Ä–∏–±—É—Ç –∏ —á—Ç–æ —Ç–∞–∫–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ?
// üîπ –ê—Ç—Ä–∏–±—É—Ç (attribute) ‚Äî —ç—Ç–æ —Ç–æ, —á—Ç–æ –Ω–∞–ø–∏—Å–∞–Ω–æ –≤ HTML:

// <input class="my-input" id="123">
// –ó–¥–µ—Å—å id="123" ‚Äî –∞—Ç—Ä–∏–±—É—Ç —ç–ª–µ–º–µ–Ω—Ç–∞.
//
// üîπ –°–≤–æ–π—Å—Ç–≤–æ (property) ‚Äî —ç—Ç–æ —Ç–æ, —á—Ç–æ –¥–æ—Å—Ç—É–ø–Ω–æ —á–µ—Ä–µ–∑ JavaScript, –∫–∞–∫ —á–∞—Å—Ç—å –æ–±—ä–µ–∫—Ç–∞ DOM.
// –ö–æ–≥–¥–∞ –±—Ä–∞—É–∑–µ—Ä —á–∏—Ç–∞–µ—Ç HTML, –æ–Ω —Å–æ–∑–¥–∞—ë—Ç –æ–±—ä–µ–∫—Ç JavaScript (myInput), —É –∫–æ—Ç–æ—Ä–æ–≥–æ –µ—Å—Ç—å —Å–≤–æ–π—Å—Ç–≤–∞: id, className, value –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ.
//
// ‚úÖ –¢–µ–ø–µ—Ä—å —Ä–∞–∑–±–æ—Ä –∫–æ–¥–∞

// const myInput = document.querySelector('.my-input');
// üî∏ –≠—Ç–æ –≤—ã–±–∏—Ä–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç —Å –∫–ª–∞—Å—Å–æ–º my-input –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é myInput.
//
// üîπ –°—Ç—Ä–æ–∫–∞ 1:
// myInput.setAttribute('id', '123');
// üî∏ –¢—ã —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—à—å –∞—Ç—Ä–∏–±—É—Ç id –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ "123".
//
// ‚û°Ô∏è –¢–µ–ø–µ—Ä—å –≤ HTML —ç–ª–µ–º–µ–Ω—Ç –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫:
// <input class="my-input" id="123">

// üîπ –°—Ç—Ä–æ–∫–∞ 2:
// console.log(myInput.id);
// üî∏ –≠—Ç–æ –¥–æ—Å—Ç—É–ø –∫ –°–í–û–ô–°–¢–í–£ id —É –æ–±—ä–µ–∫—Ç–∞ myInput.
//
// ‚û°Ô∏è –û–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç "123", –ø–æ—Ç–æ–º—É —á—Ç–æ:
//
// –ö–æ–≥–¥–∞ —Ç—ã —É—Å—Ç–∞–Ω–æ–≤–∏–ª –∞—Ç—Ä–∏–±—É—Ç id, —Å–≤–æ–π—Å—Ç–≤–æ id —Ç–æ–∂–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–ª–æ—Å—å.
//
// üîπ –°—Ç—Ä–æ–∫–∞ 3:

// myInput.id = "321";
// üî∏ –¢–µ–ø–µ—Ä—å —Ç—ã –º–µ–Ω—è–µ—à—å –°–í–û–ô–°–¢–í–û id –Ω–∞ "321".
//
// ‚û°Ô∏è –í–∞–∂–Ω–æ: –ø—Ä–∏ —ç—Ç–æ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∏ HTML-–∞—Ç—Ä–∏–±—É—Ç id.
// –¢–µ–ø–µ—Ä—å —ç–ª–µ–º–µ–Ω—Ç –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫:
// <input class="my-input" id="321">
// üîπ –°—Ç—Ä–æ–∫–∞ 4:
// console.log(myInput.getAttribute('id'));
// üî∏ –≠—Ç–æ —á—Ç–µ–Ω–∏–µ –ê–¢–†–ò–ë–£–¢–ê id –Ω–∞–ø—Ä—è–º—É—é –∏–∑ HTML.
//
// ‚û°Ô∏è –ò –æ–Ω —Ç–æ–∂–µ –±—É–¥–µ—Ç "321", –ø–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω –æ–±–Ω–æ–≤–∏–ª—Å—è –≤–º–µ—Å—Ç–µ —Å–æ —Å–≤–æ–π—Å—Ç–≤–æ–º.

//–î–µ–π—Å—Ç–≤–∏–µ	–ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç
// setAttribute(name, val)	–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞—Ç—Ä–∏–±—É—Ç –≤ HTML. –ò–Ω–æ–≥–¥–∞ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏ —Å–≤–æ–π—Å—Ç–≤–æ.
// element.property = val	–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–≤–æ–π—Å—Ç–≤–æ DOM. –ß–∞—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏ –∞—Ç—Ä–∏–±—É—Ç.
// getAttribute(name)	–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞—Ç—Ä–∏–±—É—Ç, –∑–∞–ø–∏—Å–∞–Ω–Ω—ã–π –≤ HTML.
// element.property	–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–≤–æ–π—Å—Ç–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω—è—Ç—å.
//
// ‚ö†Ô∏è –ò—Å–∫–ª—é—á–µ–Ω–∏—è –∏ –Ω—é–∞–Ω—Å—ã
// –ù–µ –≤—Å–µ –∞—Ç—Ä–∏–±—É—Ç—ã –∏ —Å–≤–æ–π—Å—Ç–≤–∞ –≤–µ–¥—É—Ç —Å–µ–±—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ.
//
// –ù–∞–ø—Ä–∏–º–µ—Ä:

// const input = document.querySelector('input');
// input.value = '–ü—Ä–∏–≤–µ—Ç';              // –º–µ–Ω—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ø–æ–ª–µ
// input.setAttribute('value', '–ü–æ–∫–∞'); // –º–µ–Ω—è–µ—Ç —Ç–æ–ª—å–∫–æ –∞—Ç—Ä–∏–±—É—Ç –≤ HTML, –Ω–µ –≤–ª–∏—è–µ—Ç –Ω–∞ —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –ø–æ–ª–µ
// ‚û°Ô∏è –¢—É—Ç value —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ-–¥—Ä—É–≥–æ–º—É: –∞—Ç—Ä–∏–±—É—Ç "value" –∑–∞–¥–∞—ë—Ç –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –∞ —Å–≤–æ–π—Å—Ç–≤–æ "value" ‚Äî —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è.
//
// üìå –ò—Ç–æ–≥
// –í HTML ‚Äî —ç—Ç–æ –∞—Ç—Ä–∏–±—É—Ç—ã (<input id="123">).
//
// –í JavaScript ‚Äî —ç—Ç–æ —Å–≤–æ–π—Å—Ç–≤–∞ (input.id).
//
// –û–Ω–∏ —Å–≤—è–∑–∞–Ω—ã, –Ω–æ –Ω–µ –≤—Å–µ–≥–¥–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é, –æ—Å–æ–±–µ–Ω–Ω–æ –¥–ª—è value, checked, selected.


//dataset


//cool propetries
//get el tag
console.log(link.tagName);

//hide or show element
btn.hidden = true;
console.log(btn.hidden);



